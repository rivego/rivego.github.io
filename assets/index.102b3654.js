import{m as v,Y as g,d as E,c as w,o as n,e as d,f as t,F as p,C as _,h as u,j as c,X as S,g as T,w as C,l as B,V as D}from"./index.b747fd95.js";import{l as k}from"./load.b9090f49.js";var F=JSON.parse('{"keyMaps":[["name","a"],["platform","b"],["id","c"],["pid","d"],["verdict","e"],["creationTime","f"]],"stringMaps":[["codeforces","a"],["OK","b"]],"data":{"startTime":1723915998,"history":{"user":[{"a":"jiangly","newSubmissions":[{"b":"a","c":277933165,"d":"2001E2","a":"Deterministic Heap (Hard Version)","e":"b","f":1724512885},{"b":"a","c":277930824,"d":"2001E1","a":"Deterministic Heap (Easy Version)","e":"b","f":1724511856},{"b":"a","c":277929584,"d":"2001D","a":"Longest Max Min Subsequence","e":"b","f":1724511317},{"b":"a","c":277927776,"d":"2001C","a":"Guess The Tree","e":"b","f":1724510545},{"b":"a","c":277927294,"d":"2001B","a":"Generate Permutation","e":"b","f":1724510351},{"b":"a","c":277926661,"d":"2001A","a":"Make All Equal","e":"b","f":1724510090}],"newContests":[]}],"contest":[]},"commits":["9dc758afc46ecec74875cb50a9f581a0f4b8f0ed","67ff79d3d2dd3ffc760203010f2476206ad68ed2","26ab5664e27244b8673fc36615caa3c631e6d5fa","072abc3bc802ba8a3f40818df5992d9ea2f8f710","efff22ae736dddd2768ed796208dc2130bcdb94d","0338b58f5927fe29a43e4d8416cc2987db626eb2","e3f86a91ca9249d2d4f305c206d6250aa97ee68b","a532ec1cf65122cd0ad5370a392d5d5d53c14b69","3c5f32adeb9a0098995a8b498790022ee09c1dc1","4100ec15616c701731cd215330d3d3364ea866e8","5d856a77945c086592b1118b712a4c6e60a2891b","152d4b7c88efb18e30f44020c8a68297e59b643d","d69f13061ec011029e88b80ba832fb914539c831"]}}');const b=k(F),M=b.history;b.commits;const R=v(b.startTime);class V{constructor(){this.submissions=new Map}mergeSub(e,s){this.submissions.has(e)?this.submissions.get(e).push(s):this.submissions.set(e,[s])}list(){const e=[];for(const[s,o]of this.submissions)e.push({name:s,newSubmissions:o,newContests:[]});return e.sort((s,o)=>o.newSubmissions.length-s.newSubmissions.length)}}const l=new Map;var h;for(const a of(h=M.user)!=null?h:[])for(const e of a.newSubmissions){if(e.creationTime<b.startTime)continue;const s=g(e.creationTime).value;l.has(s)||l.set(s,new V),l.get(s).mergeSub(a.name,e)}const m=[...l.entries()].map(a=>({day:a[0],record:a[1]})).sort((a,e)=>e.day.localeCompare(a.day)).map(a=>({day:a.day.replace(/(\d+)-0?(\d+)-0?(\d+)/,"$1 \u5E74 $2 \u6708 $3 \u65E5"),record:a.record}));const x={class:"divide-y"},A=t("h2",{class:"mb-4"},"\u5386\u53F2",-1),L={class:"py-4"},H={class:"pl-[8px] relative timeline"},N={class:"font-bold pb-2"},O={class:"mt-2"},$=t("span",null," \u63D0\u4EA4\u4E86 ",-1),j={class:"font-bold"},q=t("span",null," \u6B21\u4EE3\u7801\uFF0C\u901A\u8FC7\u4E86 ",-1),G={class:"font-bold"},K=t("span",null," \u4E2A\u9898\u76EE",-1),z={class:"mt-2 pt-4"},J={class:"text-gray-400"},X=E({setup(a){const e=s=>s.filter(o=>o.verdict===D.OK);return(s,o)=>{const y=w("router-link");return n(),d("div",x,[A,t("div",L,[t("div",H,[(n(!0),d(p,null,_(u(m),(f,i)=>(n(),d("div",{key:f.day,class:"relative timeline-item pl-4"},[t("div",{class:"py-4 px-4 border rounded-md divide-y",style:S({borderTopWidth:i>0?0:void 0,borderTopLeftRadius:i>0?0:void 0,borderTopRightRadius:i>0?0:void 0,borderBottomLeftRadius:i+1<u(m).length?0:void 0,borderBottomRightRadius:i+1<u(m).length?0:void 0})},[t("div",N,c(f.day),1),t("div",null,[(n(!0),d(p,null,_(f.record.list(),r=>(n(),d("div",O,[T(y,{to:`/user/${r.name}`},{default:C(()=>[B(c(r.name),1)]),_:2},1032,["to"]),$,t("span",j,c(r.newSubmissions.length),1),q,t("span",G,c(e(r.newSubmissions).length),1),K]))),256))])],4)]))),128))])]),t("div",z,[t("span",J,"\u6700\u8FD1\u5F00\u59CB\u4E8E "+c(u(R)),1)])])}}});export{X as default};
