import{m as v,Y as g,d as w,c as C,o as n,e as d,f as t,F as p,C as _,h as b,j as c,X as E,g as S,w as T,l as B,V as F}from"./index.9dd10819.js";import{l as k}from"./load.b9090f49.js";var D=JSON.parse('{"keyMaps":[["name","a"],["platform","b"],["id","c"],["pid","d"],["verdict","e"],["creationTime","f"]],"stringMaps":[["codeforces","a"],["OK","b"]],"data":{"startTime":1723613729,"history":{"user":[{"a":"jiangly","newSubmissions":[{"b":"a","c":276630835,"d":"2004G","a":"Substring Compression","e":"b","f":1723736121},{"b":"a","c":276603077,"d":"2004F","a":"Make a Palindrome","e":"b","f":1723734675},{"b":"a","c":276596867,"d":"2004E","a":"Not a Nim Problem","e":"b","f":1723734404},{"b":"a","c":276582738,"d":"2004D","a":"Colored Portals","e":"b","f":1723733828},{"b":"a","c":276566732,"d":"2004C","a":"Splitting Items","e":"b","f":1723733164},{"b":"a","c":276561786,"d":"2004B","a":"Game with Doors","e":"b","f":1723732968},{"b":"a","c":276553218,"d":"2004A","a":"Closest Point","e":"b","f":1723732710}],"newContests":[]}],"contest":[]},"commits":["e3f86a91ca9249d2d4f305c206d6250aa97ee68b","a532ec1cf65122cd0ad5370a392d5d5d53c14b69","3c5f32adeb9a0098995a8b498790022ee09c1dc1","4100ec15616c701731cd215330d3d3364ea866e8","5d856a77945c086592b1118b712a4c6e60a2891b","152d4b7c88efb18e30f44020c8a68297e59b643d","d69f13061ec011029e88b80ba832fb914539c831","f408cdc0410b9d747379230ccd532c72897b373b","e8a0471b0edf34f8ae8b69be3abd445db863b7f6","bc679a476843b681369e6fe97b32e65a779a6167","0f6c4e8ce67860fef3ec7007fc8a110ab92b5868","5c77e63952431eb9b6b83385e76ac2426a2789f9","3bd17b13bd8c04ef2c7d7524baa7095619f30677","8a8cd5a82dd5f495eeef74530f971a23afa86891"]}}');const l=k(D),R=l.history;l.commits;const N=v(l.startTime);class x{constructor(){this.submissions=new Map}mergeSub(e,s){this.submissions.has(e)?this.submissions.get(e).push(s):this.submissions.set(e,[s])}list(){const e=[];for(const[s,o]of this.submissions)e.push({name:s,newSubmissions:o,newContests:[]});return e.sort((s,o)=>o.newSubmissions.length-s.newSubmissions.length)}}const u=new Map;var h;for(const a of(h=R.user)!=null?h:[])for(const e of a.newSubmissions){if(e.creationTime<l.startTime)continue;const s=g(e.creationTime).value;u.has(s)||u.set(s,new x),u.get(s).mergeSub(a.name,e)}const f=[...u.entries()].map(a=>({day:a[0],record:a[1]})).sort((a,e)=>e.day.localeCompare(a.day)).map(a=>({day:a.day.replace(/(\d+)-0?(\d+)-0?(\d+)/,"$1 \u5E74 $2 \u6708 $3 \u65E5"),record:a.record}));const M={class:"divide-y"},V=t("h2",{class:"mb-4"},"\u5386\u53F2",-1),A={class:"py-4"},L={class:"pl-[8px] relative timeline"},O={class:"font-bold pb-2"},P={class:"mt-2"},$=t("span",null," \u63D0\u4EA4\u4E86 ",-1),j={class:"font-bold"},G=t("span",null," \u6B21\u4EE3\u7801\uFF0C\u901A\u8FC7\u4E86 ",-1),K={class:"font-bold"},z=t("span",null," \u4E2A\u9898\u76EE",-1),H={class:"mt-2 pt-4"},I={class:"text-gray-400"},X=w({setup(a){const e=s=>s.filter(o=>o.verdict===F.OK);return(s,o)=>{const y=C("router-link");return n(),d("div",M,[V,t("div",A,[t("div",L,[(n(!0),d(p,null,_(b(f),(m,i)=>(n(),d("div",{key:m.day,class:"relative timeline-item pl-4"},[t("div",{class:"py-4 px-4 border rounded-md divide-y",style:E({borderTopWidth:i>0?0:void 0,borderTopLeftRadius:i>0?0:void 0,borderTopRightRadius:i>0?0:void 0,borderBottomLeftRadius:i+1<b(f).length?0:void 0,borderBottomRightRadius:i+1<b(f).length?0:void 0})},[t("div",O,c(m.day),1),t("div",null,[(n(!0),d(p,null,_(m.record.list(),r=>(n(),d("div",P,[S(y,{to:`/user/${r.name}`},{default:T(()=>[B(c(r.name),1)]),_:2},1032,["to"]),$,t("span",j,c(r.newSubmissions.length),1),G,t("span",K,c(e(r.newSubmissions).length),1),z]))),256))])],4)]))),128))])]),t("div",H,[t("span",I,"\u6700\u8FD1\u5F00\u59CB\u4E8E "+c(b(N)),1)])])}}});export{X as default};
