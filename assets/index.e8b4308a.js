import{m as y,Y as v,d as S,c as B,o as i,e as n,f as s,F as g,C as h,h as f,j as d,X as C,g as E,w,l as T,V as k}from"./index.ebe56fff.js";import{l as A}from"./load.b9090f49.js";var D=JSON.parse('{"keyMaps":[["name","a"],["newSubmissions","b"],["platform","c"],["id","d"],["pid","e"],["verdict","f"],["creationTime","g"],["newContests","h"]],"stringMaps":[["jiangly","a"],["codeforces","b"],["OK","c"],["1838F","d"],["Stuck Conveyor","e"],["WRONG_ANSWER","f"],["1838C","g"],["No Prime Differences","h"],["1838B","i"],["Minimize Permutation Subarrays","j"]],"data":{"startTime":1685770393,"history":{"user":[{"a":"a","b":[{"c":"b","d":208970622,"e":"1828B","a":"Permutation Swap","f":"c","g":1686214497},{"c":"b","d":208970432,"e":"1828A","a":"Divisible Array","f":"c","g":1686214367},{"c":"b","d":208970234,"e":"1831B","a":"Array merging","f":"c","g":1686214250},{"c":"b","d":208970001,"e":"1831A","a":"Twin Permutations","f":"c","g":1686214116},{"c":"b","d":208969745,"e":"1839E","a":"Decreasing Game","f":"c","g":1686213958},{"c":"b","d":208968674,"e":"1839D","a":"Ball Sorting","f":"c","g":1686213376},{"c":"b","d":208967540,"e":"1839C","a":"Insert Zero and Invert Prefix","f":"c","g":1686212674},{"c":"b","d":208967086,"e":"1839B","a":"Lamps","f":"c","g":1686212387},{"c":"b","d":208965670,"e":"1839A","a":"The Good Array","f":"c","g":1686211558},{"c":"b","d":208965092,"e":"d","a":"e","f":"c","g":1686211184},{"c":"b","d":208965057,"e":"d","a":"e","f":"f","g":1686211158},{"c":"b","d":208964967,"e":"d","a":"e","f":"f","g":1686211105},{"c":"b","d":208964907,"e":"d","a":"e","f":"f","g":1686211064}],"h":[]},{"a":"a","b":[{"c":"b","d":208862626,"e":"1838E","a":"Count Supersequences","f":"c","g":1686121193},{"c":"b","d":208859298,"e":"1838D","a":"Bracket Walk","f":"c","g":1686118869},{"c":"b","d":208858637,"e":"g","a":"h","f":"c","g":1686118361},{"c":"b","d":208858165,"e":"g","a":"h","f":"f","g":1686117977},{"c":"b","d":208857285,"e":"i","a":"j","f":"c","g":1686117249},{"c":"b","d":208857237,"e":"i","a":"j","f":"f","g":1686117212},{"c":"b","d":208857138,"e":"i","a":"j","f":"f","g":1686117138},{"c":"b","d":208856752,"e":"1838A","a":"Blackboard List","f":"c","g":1686116827},{"c":"b","d":208856519,"e":"1840G2","a":"In Search of Truth (Hard Version)","f":"c","g":1686116619},{"c":"b","d":208856487,"e":"1840G1","a":"In Search of Truth (Easy Version)","f":"c","g":1686116591}],"h":[]},{"a":"a","b":[{"c":"b","d":208853998,"e":"1840F","a":"Railguns","f":"c","g":1686114383},{"c":"b","d":208852317,"e":"1840E","a":"Character Blocking","f":"c","g":1686112758},{"c":"b","d":208851635,"e":"1840D","a":"Wooden Toy Festival","f":"c","g":1686112114},{"c":"b","d":208851448,"e":"1840C","a":"Ski Resort","f":"c","g":1686111909},{"c":"b","d":208851229,"e":"1840B","a":"Binary Cafe","f":"c","g":1686111692},{"c":"b","d":208851136,"e":"1840A","a":"Cipher Shifer","f":"c","g":1686111602}],"h":[]}],"contest":[]},"commits":["a654d21c55fe5886406498d7ce67f93f4d2f152d","0e8759b5e2075165453ec9ba474007535e7c4ad8","526c16036078a9808b814368ce00f47f0e47c7bb","9a19d497b4dcd035af972c76b4f4578a15bcdc89","33df2459fc9af884cd5690bfb36478a18e4b9a7c","429efe657f9f94364e5c6e00e014513d3af05a5e","3f6327ca52b58a7cf028baf59f1a112cce6917bb","14e4085229bda907d82f0426083c5bf548990c3e","cf01c0493e7e68aef527b11a8f76d789fa09a766","ffd26ae11a5a6b5baa26a789c1eabdbad02c494f","85cdb206a4da4a220b6b140121b4a313cc5d8011","9b3ff03fd3f664fa05bf94ea601145b6b1635a38","b170148160c1c5cc876bccbaa819086125013ada","7ef36b7ac1c73b683cf39ebe9a819ec0796a8a5b"]}}');const u=A(D),F=u.history;u.commits;const R=y(u.startTime);class N{constructor(){this.submissions=new Map}mergeSub(e,a){this.submissions.has(e)?this.submissions.get(e).push(a):this.submissions.set(e,[a])}list(){const e=[];for(const[a,c]of this.submissions)e.push({name:a,newSubmissions:c,newContests:[]});return e.sort((a,c)=>c.newSubmissions.length-a.newSubmissions.length)}}const b=new Map;var p;for(const t of(p=F.user)!=null?p:[])for(const e of t.newSubmissions){if(e.creationTime<u.startTime)continue;const a=v(e.creationTime).value;b.has(a)||b.set(a,new N),b.get(a).mergeSub(t.name,e)}const m=[...b.entries()].map(t=>({day:t[0],record:t[1]})).sort((t,e)=>e.day.localeCompare(t.day)).map(t=>({day:t.day.replace(/(\d+)-0?(\d+)-0?(\d+)/,"$1 \u5E74 $2 \u6708 $3 \u65E5"),record:t.record}));const V={class:"divide-y"},j=s("h2",{class:"mb-4"},"\u5386\u53F2",-1),x={class:"py-4"},L={class:"pl-[8px] relative timeline"},G={class:"font-bold pb-2"},M={class:"mt-2"},O=s("span",null," \u63D0\u4EA4\u4E86 ",-1),P={class:"font-bold"},W=s("span",null," \u6B21\u4EE3\u7801\uFF0C\u901A\u8FC7\u4E86 ",-1),I={class:"font-bold"},$=s("span",null," \u4E2A\u9898\u76EE",-1),z={class:"mt-2 pt-4"},H={class:"text-gray-400"},J=S({setup(t){const e=a=>a.filter(c=>c.verdict===k.OK);return(a,c)=>{const _=B("router-link");return i(),n("div",V,[j,s("div",x,[s("div",L,[(i(!0),n(g,null,h(f(m),(l,o)=>(i(),n("div",{key:l.day,class:"relative timeline-item pl-4"},[s("div",{class:"py-4 px-4 border rounded-md divide-y",style:C({borderTopWidth:o>0?0:void 0,borderTopLeftRadius:o>0?0:void 0,borderTopRightRadius:o>0?0:void 0,borderBottomLeftRadius:o+1<f(m).length?0:void 0,borderBottomRightRadius:o+1<f(m).length?0:void 0})},[s("div",G,d(l.day),1),s("div",null,[(i(!0),n(g,null,h(l.record.list(),r=>(i(),n("div",M,[E(_,{to:`/user/${r.name}`},{default:w(()=>[T(d(r.name),1)]),_:2},1032,["to"]),O,s("span",P,d(r.newSubmissions.length),1),W,s("span",I,d(e(r.newSubmissions).length),1),$]))),256))])],4)]))),128))])]),s("div",z,[s("span",H,"\u6700\u8FD1\u5F00\u59CB\u4E8E "+d(f(R)),1)])])}}});export{J as default};
