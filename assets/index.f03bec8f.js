import{m as v,Y as y,d as w,c as S,o as c,e as n,f as s,F as g,C as h,h as b,j as i,X as C,g as E,w as T,l as k,V as A}from"./index.c89045ae.js";import{l as B}from"./load.b9090f49.js";var D=JSON.parse('{"keyMaps":[["name","a"],["newSubmissions","b"],["platform","c"],["id","d"],["pid","e"],["verdict","f"],["creationTime","g"],["newContests","h"]],"stringMaps":[["jiangly","a"],["codeforces","b"],["2079A","c"],["Alice, Bob, And Two Arrays","d"],["OK","e"],["PARTIAL","f"],["1092C","g"],["Prefixes and Suffixes","h"],["WRONG_ANSWER","i"],["1092D2","j"],["Great Vova Wall (Version 2)","k"],["1097E","l"],["Egor and an RPG game","m"],["1095D","n"],["Circular Dance","o"]],"data":{"startTime":1740936873,"history":{"user":[{"a":"a","b":[{"c":"b","d":309325996,"e":"c","a":"d","f":"e","g":1741342248},{"c":"b","d":309322564,"e":"c","a":"d","f":"f","g":1741340321},{"c":"b","d":309322275,"e":"c","a":"d","f":"f","g":1741340158},{"c":"b","d":309317578,"e":"2079C","a":"Dreaming Is Not Harmful","f":"e","g":1741337590},{"c":"b","d":309315460,"e":"2079D","a":"Cute Subsequences","f":"e","g":1741336479},{"c":"b","d":309314553,"e":"2079B","a":"Arithmetic Exercise","f":"e","g":1741335999}],"h":[]},{"a":"a","b":[{"c":"b","d":309248690,"e":"1092A","a":"Uniform String","f":"e","g":1741283097},{"c":"b","d":309248564,"e":"g","a":"h","f":"e","g":1741283025},{"c":"b","d":309248318,"e":"g","a":"h","f":"i","g":1741282899},{"c":"b","d":309247781,"e":"1092D1","a":"Great Vova Wall (Version 1)","f":"e","g":1741282633}],"h":[]},{"a":"a","b":[{"c":"b","d":309247644,"e":"j","a":"k","f":"e","g":1741282567},{"c":"b","d":309247063,"e":"j","a":"k","f":"i","g":1741282266},{"c":"b","d":309243825,"e":"1092E","a":"Minimal Diameter Forest","f":"e","g":1741280812},{"c":"b","d":309241887,"e":"1092F","a":"Tree with Maximum Cost","f":"e","g":1741279860},{"c":"b","d":309218692,"e":"1097B","a":"Petr and a Combination Lock","f":"e","g":1741269568},{"c":"b","d":309218462,"e":"1097C","a":"Yuhao and a Parenthesis","f":"e","g":1741269473},{"c":"b","d":309218076,"e":"1097D","a":"Makoto and a Blackboard","f":"e","g":1741269291},{"c":"b","d":309217307,"e":"l","a":"m","f":"e","g":1741268968},{"c":"b","d":309216997,"e":"l","a":"m","f":"i","g":1741268842},{"c":"b","d":309212755,"e":"1097F","a":"Alex and a TV Show","f":"e","g":1741267263},{"c":"b","d":309210511,"e":"1097G","a":"Vladislav and a Great Legend","f":"e","g":1741266375},{"c":"b","d":309196162,"e":"1097H","a":"Mateusz and an Infinite Sequence","f":"e","g":1741260430}],"h":[]},{"a":"a","b":[{"c":"b","d":309045790,"e":"1095F","a":"Make It Connected","f":"e","g":1741168736},{"c":"b","d":309045470,"e":"n","a":"o","f":"e","g":1741168572},{"c":"b","d":309045366,"e":"1095E","a":"Almost Regular Bracket Sequence","f":"e","g":1741168504},{"c":"b","d":309044792,"e":"n","a":"o","f":"i","g":1741168188},{"c":"b","d":309044528,"e":"1095C","a":"Powers Of Two","f":"e","g":1741168040},{"c":"b","d":309044247,"e":"1095B","a":"Array Stabilization","f":"e","g":1741167886}],"h":[]}],"contest":[]},"commits":["2f1954c948acfc84ea3c549268a4a4da922480f1","fa2593e3cf54149987e62bcb34bfbb3bbff90e27","ce98d82443a1176f1db51efbfa0a50a291f2fe82","d9e56bb8629c1e64b5ea8f3b6d766bf67b7396e0","9a1c2258364120a11369011e74ee97e1b32aa7fa","b83e734d6132252093f85d64c2bb917ccb1ada5c","0b1f44610d1baf9d3cfe2d40978b3dce24358fbb","3e0c91162d11feccb791e38f87f4b6f5db6b1b4e","9978ecd382514eb576210e130ca383d226a906ad","3b4cc13eaae2d302aa706f8835c8b154e1313a18","c2b94523f030d7b3bdd69132bb193b579b564e9b","41a82161d91ad5537600da4e6c895035761e29f8","a68b9f0ca283608bdfcd4c862e06b7a17a97d228","727a65845c41a387bc47a3a623c7644f9c62c162","3a3a0e6853cb4935d837677874b5a91fdeae0f6d"]}}');const l=B(D),F=l.history;l.commits;const R=v(l.startTime);class V{constructor(){this.submissions=new Map}mergeSub(e,a){this.submissions.has(e)?this.submissions.get(e).push(a):this.submissions.set(e,[a])}list(){const e=[];for(const[a,o]of this.submissions)e.push({name:a,newSubmissions:o,newContests:[]});return e.sort((a,o)=>o.newSubmissions.length-a.newSubmissions.length)}}const f=new Map;var _;for(const t of(_=F.user)!=null?_:[])for(const e of t.newSubmissions){if(e.creationTime<l.startTime)continue;const a=y(e.creationTime).value;f.has(a)||f.set(a,new V),f.get(a).mergeSub(t.name,e)}const m=[...f.entries()].map(t=>({day:t[0],record:t[1]})).sort((t,e)=>e.day.localeCompare(t.day)).map(t=>({day:t.day.replace(/(\d+)-0?(\d+)-0?(\d+)/,"$1 \u5E74 $2 \u6708 $3 \u65E5"),record:t.record}));const x={class:"divide-y"},M=s("h2",{class:"mb-4"},"\u5386\u53F2",-1),L={class:"py-4"},N={class:"pl-[8px] relative timeline"},G={class:"font-bold pb-2"},O={class:"mt-2"},P=s("span",null," \u63D0\u4EA4\u4E86 ",-1),j={class:"font-bold"},W=s("span",null," \u6B21\u4EE3\u7801\uFF0C\u901A\u8FC7\u4E86 ",-1),I={class:"font-bold"},$=s("span",null," \u4E2A\u9898\u76EE",-1),q={class:"mt-2 pt-4"},z={class:"text-gray-400"},Y=w({setup(t){const e=a=>a.filter(o=>o.verdict===A.OK);return(a,o)=>{const p=S("router-link");return c(),n("div",x,[M,s("div",L,[s("div",N,[(c(!0),n(g,null,h(b(m),(u,d)=>(c(),n("div",{key:u.day,class:"relative timeline-item pl-4"},[s("div",{class:"py-4 px-4 border rounded-md divide-y",style:C({borderTopWidth:d>0?0:void 0,borderTopLeftRadius:d>0?0:void 0,borderTopRightRadius:d>0?0:void 0,borderBottomLeftRadius:d+1<b(m).length?0:void 0,borderBottomRightRadius:d+1<b(m).length?0:void 0})},[s("div",G,i(u.day),1),s("div",null,[(c(!0),n(g,null,h(u.record.list(),r=>(c(),n("div",O,[E(p,{to:`/user/${r.name}`},{default:T(()=>[k(i(r.name),1)]),_:2},1032,["to"]),P,s("span",j,i(r.newSubmissions.length),1),W,s("span",I,i(e(r.newSubmissions).length),1),$]))),256))])],4)]))),128))])]),s("div",q,[s("span",z,"\u6700\u8FD1\u5F00\u59CB\u4E8E "+i(b(R)),1)])])}}});export{Y as default};
