import{m as g,Y as y,d as E,c as w,o as n,e as c,f as a,F as _,C as h,h as u,j as i,X as T,g as R,w as S,l as C,V as k}from"./index.ec5dcb7e.js";import{l as B}from"./load.b9090f49.js";var F=JSON.parse('{"keyMaps":[["name","a"],["newSubmissions","b"],["platform","c"],["id","d"],["pid","e"],["verdict","f"],["creationTime","g"],["newContests","h"]],"stringMaps":[["Kenshin2438","a"],["codeforces","b"],["OK","c"],["1856E2","d"],["PermuTree (hard version)","e"],["RUNTIME_ERROR","f"]],"data":{"startTime":1690781587,"history":{"user":[{"a":"a","b":[{"c":"b","d":217401871,"e":"1856E1","a":"PermuTree (easy version)","f":"c","g":1691294716},{"c":"b","d":217401857,"e":"d","a":"e","f":"c","g":1691294697},{"c":"b","d":217401262,"e":"d","a":"e","f":"f","g":1691294093},{"c":"b","d":217401045,"e":"d","a":"e","f":"f","g":1691293873},{"c":"b","d":217400482,"e":"d","a":"e","f":"WRONG_ANSWER","g":1691293326}],"h":[]},{"a":"a","b":[{"c":"b","d":216672392,"e":"1829E","a":"The Lakes","f":"c","g":1690874727}],"h":[]}],"contest":[]},"commits":["2f4ea2fbd4f67e28cebabeaab6c9800f65d155da","b867daa0117641b396e0224cf4e650ef2f366624","5ba861196d7b8eb5bd71e4caeb5dacc6f2aa184e","8c3df42d18144a606e5fad662e62313a3debedc3","ed93e6bad6adf7cadd80b954f3a080bc5bc633b6","66aa45d8eda1834efe6cc7135a14af5978f1af9f","0ffee74692815ecad0ddc65977b0bc9f7d7669e1","bc5d35f81a2d9b579fde21155e576c8975c0c069","f4ca3fe0102080b4ae619da79cd63564609540f4","e1a193a0ee77dffe3bea992de4c60146c59336eb","2cdd398eae3ac22bf7962ef92a3f645c203e9c13","bf08200b70c617116984ab412279fc4976ce53c2","a790f57a838e0a15785add1f6feb37824a5d1eb9","d06fc8b18aa277dd53d78fcac663f43f7e0f0768"]}}');const b=B(F),N=b.history;b.commits;const D=g(b.startTime);class O{constructor(){this.submissions=new Map}mergeSub(e,s){this.submissions.has(e)?this.submissions.get(e).push(s):this.submissions.set(e,[s])}list(){const e=[];for(const[s,o]of this.submissions)e.push({name:s,newSubmissions:o,newContests:[]});return e.sort((s,o)=>o.newSubmissions.length-s.newSubmissions.length)}}const f=new Map;var p;for(const t of(p=N.user)!=null?p:[])for(const e of t.newSubmissions){if(e.creationTime<b.startTime)continue;const s=y(e.creationTime).value;f.has(s)||f.set(s,new O),f.get(s).mergeSub(t.name,e)}const m=[...f.entries()].map(t=>({day:t[0],record:t[1]})).sort((t,e)=>e.day.localeCompare(t.day)).map(t=>({day:t.day.replace(/(\d+)-0?(\d+)-0?(\d+)/,"$1 \u5E74 $2 \u6708 $3 \u65E5"),record:t.record}));const x={class:"divide-y"},L=a("h2",{class:"mb-4"},"\u5386\u53F2",-1),M={class:"py-4"},V={class:"pl-[8px] relative timeline"},A={class:"font-bold pb-2"},$={class:"mt-2"},K=a("span",null," \u63D0\u4EA4\u4E86 ",-1),W={class:"font-bold"},P=a("span",null," \u6B21\u4EE3\u7801\uFF0C\u901A\u8FC7\u4E86 ",-1),j={class:"font-bold"},z=a("span",null," \u4E2A\u9898\u76EE",-1),G={class:"mt-2 pt-4"},H={class:"text-gray-400"},U=E({setup(t){const e=s=>s.filter(o=>o.verdict===k.OK);return(s,o)=>{const v=w("router-link");return n(),c("div",x,[L,a("div",M,[a("div",V,[(n(!0),c(_,null,h(u(m),(l,d)=>(n(),c("div",{key:l.day,class:"relative timeline-item pl-4"},[a("div",{class:"py-4 px-4 border rounded-md divide-y",style:T({borderTopWidth:d>0?0:void 0,borderTopLeftRadius:d>0?0:void 0,borderTopRightRadius:d>0?0:void 0,borderBottomLeftRadius:d+1<u(m).length?0:void 0,borderBottomRightRadius:d+1<u(m).length?0:void 0})},[a("div",A,i(l.day),1),a("div",null,[(n(!0),c(_,null,h(l.record.list(),r=>(n(),c("div",$,[R(v,{to:`/user/${r.name}`},{default:S(()=>[C(i(r.name),1)]),_:2},1032,["to"]),K,a("span",W,i(r.newSubmissions.length),1),P,a("span",j,i(e(r.newSubmissions).length),1),z]))),256))])],4)]))),128))])]),a("div",G,[a("span",H,"\u6700\u8FD1\u5F00\u59CB\u4E8E "+i(u(D)),1)])])}}});export{U as default};
